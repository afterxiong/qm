package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_CORD_BEAN".
*/
public class FileCordBeanDao extends AbstractDao<FileCordBean, Long> {

    public static final String TABLENAME = "FILE_CORD_BEAN";

    /**
     * Properties of entity FileCordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VfrDevid = new Property(1, String.class, "vfrDevid", false, "VFR_DEVID");
        public final static Property Vfr_File_Type = new Property(2, int.class, "vfr_File_Type", false, "VFR__FILE__TYPE");
        public final static Property VfrFileid = new Property(3, String.class, "vfrFileid", false, "VFR_FILEID");
        public final static Property FileVid = new Property(4, String.class, "fileVid", false, "FILE_VID");
        public final static Property Vfr_File_Name = new Property(5, String.class, "vfr_File_Name", false, "VFR__FILE__NAME");
        public final static Property VfrTimestart = new Property(6, long.class, "vfrTimestart", false, "VFR_TIMESTART");
        public final static Property VfrTimeend = new Property(7, long.class, "vfrTimeend", false, "VFR_TIMEEND");
    }


    public FileCordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FileCordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_CORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VFR_DEVID\" TEXT," + // 1: vfrDevid
                "\"VFR__FILE__TYPE\" INTEGER NOT NULL ," + // 2: vfr_File_Type
                "\"VFR_FILEID\" TEXT," + // 3: vfrFileid
                "\"FILE_VID\" TEXT," + // 4: fileVid
                "\"VFR__FILE__NAME\" TEXT," + // 5: vfr_File_Name
                "\"VFR_TIMESTART\" INTEGER NOT NULL ," + // 6: vfrTimestart
                "\"VFR_TIMEEND\" INTEGER NOT NULL );"); // 7: vfrTimeend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_CORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileCordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vfrDevid = entity.getVfrDevid();
        if (vfrDevid != null) {
            stmt.bindString(2, vfrDevid);
        }
        stmt.bindLong(3, entity.getVfr_File_Type());
 
        String vfrFileid = entity.getVfrFileid();
        if (vfrFileid != null) {
            stmt.bindString(4, vfrFileid);
        }
 
        String fileVid = entity.getFileVid();
        if (fileVid != null) {
            stmt.bindString(5, fileVid);
        }
 
        String vfr_File_Name = entity.getVfr_File_Name();
        if (vfr_File_Name != null) {
            stmt.bindString(6, vfr_File_Name);
        }
        stmt.bindLong(7, entity.getVfrTimestart());
        stmt.bindLong(8, entity.getVfrTimeend());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileCordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vfrDevid = entity.getVfrDevid();
        if (vfrDevid != null) {
            stmt.bindString(2, vfrDevid);
        }
        stmt.bindLong(3, entity.getVfr_File_Type());
 
        String vfrFileid = entity.getVfrFileid();
        if (vfrFileid != null) {
            stmt.bindString(4, vfrFileid);
        }
 
        String fileVid = entity.getFileVid();
        if (fileVid != null) {
            stmt.bindString(5, fileVid);
        }
 
        String vfr_File_Name = entity.getVfr_File_Name();
        if (vfr_File_Name != null) {
            stmt.bindString(6, vfr_File_Name);
        }
        stmt.bindLong(7, entity.getVfrTimestart());
        stmt.bindLong(8, entity.getVfrTimeend());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileCordBean readEntity(Cursor cursor, int offset) {
        FileCordBean entity = new FileCordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vfrDevid
            cursor.getInt(offset + 2), // vfr_File_Type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vfrFileid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileVid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vfr_File_Name
            cursor.getLong(offset + 6), // vfrTimestart
            cursor.getLong(offset + 7) // vfrTimeend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileCordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVfrDevid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVfr_File_Type(cursor.getInt(offset + 2));
        entity.setVfrFileid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileVid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVfr_File_Name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVfrTimestart(cursor.getLong(offset + 6));
        entity.setVfrTimeend(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileCordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileCordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileCordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
