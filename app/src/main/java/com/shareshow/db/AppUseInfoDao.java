package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_USE_INFO".
*/
public class AppUseInfoDao extends AbstractDao<AppUseInfo, Long> {

    public static final String TABLENAME = "APP_USE_INFO";

    /**
     * Properties of entity AppUseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DauDbiId = new Property(1, String.class, "dauDbiId", false, "DAU_DBI_ID");
        public final static Property DauApp = new Property(2, String.class, "dauApp", false, "DAU_APP");
        public final static Property DauOpentime = new Property(3, long.class, "dauOpentime", false, "DAU_OPENTIME");
        public final static Property DauClosetime = new Property(4, long.class, "dauClosetime", false, "DAU_CLOSETIME");
    }


    public AppUseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppUseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_USE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAU_DBI_ID\" TEXT," + // 1: dauDbiId
                "\"DAU_APP\" TEXT," + // 2: dauApp
                "\"DAU_OPENTIME\" INTEGER NOT NULL ," + // 3: dauOpentime
                "\"DAU_CLOSETIME\" INTEGER NOT NULL );"); // 4: dauClosetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_USE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppUseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dauDbiId = entity.getDauDbiId();
        if (dauDbiId != null) {
            stmt.bindString(2, dauDbiId);
        }
 
        String dauApp = entity.getDauApp();
        if (dauApp != null) {
            stmt.bindString(3, dauApp);
        }
        stmt.bindLong(4, entity.getDauOpentime());
        stmt.bindLong(5, entity.getDauClosetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppUseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dauDbiId = entity.getDauDbiId();
        if (dauDbiId != null) {
            stmt.bindString(2, dauDbiId);
        }
 
        String dauApp = entity.getDauApp();
        if (dauApp != null) {
            stmt.bindString(3, dauApp);
        }
        stmt.bindLong(4, entity.getDauOpentime());
        stmt.bindLong(5, entity.getDauClosetime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppUseInfo readEntity(Cursor cursor, int offset) {
        AppUseInfo entity = new AppUseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dauDbiId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dauApp
            cursor.getLong(offset + 3), // dauOpentime
            cursor.getLong(offset + 4) // dauClosetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppUseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDauDbiId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDauApp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDauOpentime(cursor.getLong(offset + 3));
        entity.setDauClosetime(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppUseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppUseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppUseInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
