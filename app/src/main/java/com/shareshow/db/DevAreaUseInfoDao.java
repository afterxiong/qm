package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEV_AREA_USE_INFO".
*/
public class DevAreaUseInfoDao extends AbstractDao<DevAreaUseInfo, Long> {

    public static final String TABLENAME = "DEV_AREA_USE_INFO";

    /**
     * Properties of entity DevAreaUseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DauDbiId = new Property(1, String.class, "dauDbiId", false, "DAU_DBI_ID");
        public final static Property DauGroup = new Property(2, String.class, "dauGroup", false, "DAU_GROUP");
        public final static Property DauProvince = new Property(3, String.class, "dauProvince", false, "DAU_PROVINCE");
        public final static Property DauCity = new Property(4, String.class, "dauCity", false, "DAU_CITY");
        public final static Property DauTime = new Property(5, Integer.class, "dauTime", false, "DAU_TIME");
        public final static Property DauLastusertime = new Property(6, String.class, "dauLastusertime", false, "DAU_LASTUSERTIME");
        public final static Property DauDel = new Property(7, Integer.class, "dauDel", false, "DAU_DEL");
        public final static Property DauBootCount = new Property(8, Integer.class, "dauBootCount", false, "DAU_BOOT_COUNT");
        public final static Property DauBootAdShowCount = new Property(9, Integer.class, "dauBootAdShowCount", false, "DAU_BOOT_AD_SHOW_COUNT");
        public final static Property DauSaverAdShowCount = new Property(10, Integer.class, "dauSaverAdShowCount", false, "DAU_SAVER_AD_SHOW_COUNT");
        public final static Property DauSaverAdClickCount = new Property(11, Integer.class, "dauSaverAdClickCount", false, "DAU_SAVER_AD_CLICK_COUNT");
        public final static Property DauHotAdShowCount = new Property(12, Integer.class, "dauHotAdShowCount", false, "DAU_HOT_AD_SHOW_COUNT");
        public final static Property DauHotAdClickCount = new Property(13, Integer.class, "dauHotAdClickCount", false, "DAU_HOT_AD_CLICK_COUNT");
        public final static Property DauOfficialAdClickCount = new Property(14, Integer.class, "dauOfficialAdClickCount", false, "DAU_OFFICIAL_AD_CLICK_COUNT");
        public final static Property DauDate = new Property(15, String.class, "dauDate", false, "DAU_DATE");
    }


    public DevAreaUseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DevAreaUseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEV_AREA_USE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAU_DBI_ID\" TEXT," + // 1: dauDbiId
                "\"DAU_GROUP\" TEXT," + // 2: dauGroup
                "\"DAU_PROVINCE\" TEXT," + // 3: dauProvince
                "\"DAU_CITY\" TEXT," + // 4: dauCity
                "\"DAU_TIME\" INTEGER," + // 5: dauTime
                "\"DAU_LASTUSERTIME\" TEXT," + // 6: dauLastusertime
                "\"DAU_DEL\" INTEGER," + // 7: dauDel
                "\"DAU_BOOT_COUNT\" INTEGER," + // 8: dauBootCount
                "\"DAU_BOOT_AD_SHOW_COUNT\" INTEGER," + // 9: dauBootAdShowCount
                "\"DAU_SAVER_AD_SHOW_COUNT\" INTEGER," + // 10: dauSaverAdShowCount
                "\"DAU_SAVER_AD_CLICK_COUNT\" INTEGER," + // 11: dauSaverAdClickCount
                "\"DAU_HOT_AD_SHOW_COUNT\" INTEGER," + // 12: dauHotAdShowCount
                "\"DAU_HOT_AD_CLICK_COUNT\" INTEGER," + // 13: dauHotAdClickCount
                "\"DAU_OFFICIAL_AD_CLICK_COUNT\" INTEGER," + // 14: dauOfficialAdClickCount
                "\"DAU_DATE\" TEXT);"); // 15: dauDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEV_AREA_USE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DevAreaUseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dauDbiId = entity.getDauDbiId();
        if (dauDbiId != null) {
            stmt.bindString(2, dauDbiId);
        }
 
        String dauGroup = entity.getDauGroup();
        if (dauGroup != null) {
            stmt.bindString(3, dauGroup);
        }
 
        String dauProvince = entity.getDauProvince();
        if (dauProvince != null) {
            stmt.bindString(4, dauProvince);
        }
 
        String dauCity = entity.getDauCity();
        if (dauCity != null) {
            stmt.bindString(5, dauCity);
        }
 
        Integer dauTime = entity.getDauTime();
        if (dauTime != null) {
            stmt.bindLong(6, dauTime);
        }
 
        String dauLastusertime = entity.getDauLastusertime();
        if (dauLastusertime != null) {
            stmt.bindString(7, dauLastusertime);
        }
 
        Integer dauDel = entity.getDauDel();
        if (dauDel != null) {
            stmt.bindLong(8, dauDel);
        }
 
        Integer dauBootCount = entity.getDauBootCount();
        if (dauBootCount != null) {
            stmt.bindLong(9, dauBootCount);
        }
 
        Integer dauBootAdShowCount = entity.getDauBootAdShowCount();
        if (dauBootAdShowCount != null) {
            stmt.bindLong(10, dauBootAdShowCount);
        }
 
        Integer dauSaverAdShowCount = entity.getDauSaverAdShowCount();
        if (dauSaverAdShowCount != null) {
            stmt.bindLong(11, dauSaverAdShowCount);
        }
 
        Integer dauSaverAdClickCount = entity.getDauSaverAdClickCount();
        if (dauSaverAdClickCount != null) {
            stmt.bindLong(12, dauSaverAdClickCount);
        }
 
        Integer dauHotAdShowCount = entity.getDauHotAdShowCount();
        if (dauHotAdShowCount != null) {
            stmt.bindLong(13, dauHotAdShowCount);
        }
 
        Integer dauHotAdClickCount = entity.getDauHotAdClickCount();
        if (dauHotAdClickCount != null) {
            stmt.bindLong(14, dauHotAdClickCount);
        }
 
        Integer dauOfficialAdClickCount = entity.getDauOfficialAdClickCount();
        if (dauOfficialAdClickCount != null) {
            stmt.bindLong(15, dauOfficialAdClickCount);
        }
 
        String dauDate = entity.getDauDate();
        if (dauDate != null) {
            stmt.bindString(16, dauDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DevAreaUseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dauDbiId = entity.getDauDbiId();
        if (dauDbiId != null) {
            stmt.bindString(2, dauDbiId);
        }
 
        String dauGroup = entity.getDauGroup();
        if (dauGroup != null) {
            stmt.bindString(3, dauGroup);
        }
 
        String dauProvince = entity.getDauProvince();
        if (dauProvince != null) {
            stmt.bindString(4, dauProvince);
        }
 
        String dauCity = entity.getDauCity();
        if (dauCity != null) {
            stmt.bindString(5, dauCity);
        }
 
        Integer dauTime = entity.getDauTime();
        if (dauTime != null) {
            stmt.bindLong(6, dauTime);
        }
 
        String dauLastusertime = entity.getDauLastusertime();
        if (dauLastusertime != null) {
            stmt.bindString(7, dauLastusertime);
        }
 
        Integer dauDel = entity.getDauDel();
        if (dauDel != null) {
            stmt.bindLong(8, dauDel);
        }
 
        Integer dauBootCount = entity.getDauBootCount();
        if (dauBootCount != null) {
            stmt.bindLong(9, dauBootCount);
        }
 
        Integer dauBootAdShowCount = entity.getDauBootAdShowCount();
        if (dauBootAdShowCount != null) {
            stmt.bindLong(10, dauBootAdShowCount);
        }
 
        Integer dauSaverAdShowCount = entity.getDauSaverAdShowCount();
        if (dauSaverAdShowCount != null) {
            stmt.bindLong(11, dauSaverAdShowCount);
        }
 
        Integer dauSaverAdClickCount = entity.getDauSaverAdClickCount();
        if (dauSaverAdClickCount != null) {
            stmt.bindLong(12, dauSaverAdClickCount);
        }
 
        Integer dauHotAdShowCount = entity.getDauHotAdShowCount();
        if (dauHotAdShowCount != null) {
            stmt.bindLong(13, dauHotAdShowCount);
        }
 
        Integer dauHotAdClickCount = entity.getDauHotAdClickCount();
        if (dauHotAdClickCount != null) {
            stmt.bindLong(14, dauHotAdClickCount);
        }
 
        Integer dauOfficialAdClickCount = entity.getDauOfficialAdClickCount();
        if (dauOfficialAdClickCount != null) {
            stmt.bindLong(15, dauOfficialAdClickCount);
        }
 
        String dauDate = entity.getDauDate();
        if (dauDate != null) {
            stmt.bindString(16, dauDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DevAreaUseInfo readEntity(Cursor cursor, int offset) {
        DevAreaUseInfo entity = new DevAreaUseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dauDbiId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dauGroup
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dauProvince
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dauCity
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // dauTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dauLastusertime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // dauDel
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // dauBootCount
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dauBootAdShowCount
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // dauSaverAdShowCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // dauSaverAdClickCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // dauHotAdShowCount
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // dauHotAdClickCount
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // dauOfficialAdClickCount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // dauDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DevAreaUseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDauDbiId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDauGroup(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDauProvince(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDauCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDauTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDauLastusertime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDauDel(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDauBootCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDauBootAdShowCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDauSaverAdShowCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDauSaverAdClickCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDauHotAdShowCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDauHotAdClickCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDauOfficialAdClickCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDauDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DevAreaUseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DevAreaUseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DevAreaUseInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
