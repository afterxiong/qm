package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AD_FILE".
*/
public class AdFileDao extends AbstractDao<AdFile, Long> {

    public static final String TABLENAME = "AD_FILE";

    /**
     * Properties of entity AdFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileId = new Property(2, String.class, "fileId", false, "FILE_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property ShemeIndex = new Property(4, String.class, "shemeIndex", false, "SHEME_INDEX");
        public final static Property AdcIndex = new Property(5, String.class, "adcIndex", false, "ADC_INDEX");
        public final static Property HotUrl = new Property(6, String.class, "hotUrl", false, "HOT_URL");
        public final static Property VideoFlag = new Property(7, String.class, "videoFlag", false, "VIDEO_FLAG");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property FileName = new Property(9, String.class, "fileName", false, "FILE_NAME");
    }


    public AdFileDao(DaoConfig config) {
        super(config);
    }
    
    public AdFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AD_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"FILE_ID\" TEXT," + // 2: fileId
                "\"TYPE\" TEXT," + // 3: type
                "\"SHEME_INDEX\" TEXT," + // 4: shemeIndex
                "\"ADC_INDEX\" TEXT," + // 5: adcIndex
                "\"HOT_URL\" TEXT," + // 6: hotUrl
                "\"VIDEO_FLAG\" TEXT," + // 7: videoFlag
                "\"PHONE\" TEXT," + // 8: phone
                "\"FILE_NAME\" TEXT);"); // 9: fileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AD_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(3, fileId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String shemeIndex = entity.getShemeIndex();
        if (shemeIndex != null) {
            stmt.bindString(5, shemeIndex);
        }
 
        String adcIndex = entity.getAdcIndex();
        if (adcIndex != null) {
            stmt.bindString(6, adcIndex);
        }
 
        String hotUrl = entity.getHotUrl();
        if (hotUrl != null) {
            stmt.bindString(7, hotUrl);
        }
 
        String videoFlag = entity.getVideoFlag();
        if (videoFlag != null) {
            stmt.bindString(8, videoFlag);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(3, fileId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String shemeIndex = entity.getShemeIndex();
        if (shemeIndex != null) {
            stmt.bindString(5, shemeIndex);
        }
 
        String adcIndex = entity.getAdcIndex();
        if (adcIndex != null) {
            stmt.bindString(6, adcIndex);
        }
 
        String hotUrl = entity.getHotUrl();
        if (hotUrl != null) {
            stmt.bindString(7, hotUrl);
        }
 
        String videoFlag = entity.getVideoFlag();
        if (videoFlag != null) {
            stmt.bindString(8, videoFlag);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdFile readEntity(Cursor cursor, int offset) {
        AdFile entity = new AdFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shemeIndex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adcIndex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hotUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoFlag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // fileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShemeIndex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdcIndex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHotUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoFlag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
