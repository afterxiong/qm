package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTITY_BEAN".
*/
public class NotityBeanDao extends AbstractDao<NotityBean, Long> {

    public static final String TABLENAME = "NOTITY_BEAN";

    /**
     * Properties of entity NotityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NosId = new Property(1, String.class, "nosId", false, "NOS_ID");
        public final static Property NosUserid = new Property(2, String.class, "nosUserid", false, "NOS_USERID");
        public final static Property NosOrgids = new Property(3, String.class, "nosOrgids", false, "NOS_ORGIDS");
        public final static Property NosOrgnames = new Property(4, String.class, "nosOrgnames", false, "NOS_ORGNAMES");
        public final static Property NosTitle = new Property(5, String.class, "nosTitle", false, "NOS_TITLE");
        public final static Property NosContent = new Property(6, String.class, "nosContent", false, "NOS_CONTENT");
        public final static Property NosFilepath = new Property(7, String.class, "nosFilepath", false, "NOS_FILEPATH");
        public final static Property NosFilename = new Property(8, String.class, "nosFilename", false, "NOS_FILENAME");
        public final static Property NosCreatetime = new Property(9, long.class, "nosCreatetime", false, "NOS_CREATETIME");
        public final static Property NosType = new Property(10, int.class, "nosType", false, "NOS_TYPE");
        public final static Property NosSmstId = new Property(11, String.class, "nosSmstId", false, "NOS_SMST_ID");
        public final static Property NosDel = new Property(12, int.class, "nosDel", false, "NOS_DEL");
        public final static Property IsOpen = new Property(13, boolean.class, "isOpen", false, "IS_OPEN");
    }


    public NotityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NotityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTITY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOS_ID\" TEXT," + // 1: nosId
                "\"NOS_USERID\" TEXT," + // 2: nosUserid
                "\"NOS_ORGIDS\" TEXT," + // 3: nosOrgids
                "\"NOS_ORGNAMES\" TEXT," + // 4: nosOrgnames
                "\"NOS_TITLE\" TEXT," + // 5: nosTitle
                "\"NOS_CONTENT\" TEXT," + // 6: nosContent
                "\"NOS_FILEPATH\" TEXT," + // 7: nosFilepath
                "\"NOS_FILENAME\" TEXT," + // 8: nosFilename
                "\"NOS_CREATETIME\" INTEGER NOT NULL ," + // 9: nosCreatetime
                "\"NOS_TYPE\" INTEGER NOT NULL ," + // 10: nosType
                "\"NOS_SMST_ID\" TEXT," + // 11: nosSmstId
                "\"NOS_DEL\" INTEGER NOT NULL ," + // 12: nosDel
                "\"IS_OPEN\" INTEGER NOT NULL );"); // 13: isOpen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotityBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nosId = entity.getNosId();
        if (nosId != null) {
            stmt.bindString(2, nosId);
        }
 
        String nosUserid = entity.getNosUserid();
        if (nosUserid != null) {
            stmt.bindString(3, nosUserid);
        }
 
        String nosOrgids = entity.getNosOrgids();
        if (nosOrgids != null) {
            stmt.bindString(4, nosOrgids);
        }
 
        String nosOrgnames = entity.getNosOrgnames();
        if (nosOrgnames != null) {
            stmt.bindString(5, nosOrgnames);
        }
 
        String nosTitle = entity.getNosTitle();
        if (nosTitle != null) {
            stmt.bindString(6, nosTitle);
        }
 
        String nosContent = entity.getNosContent();
        if (nosContent != null) {
            stmt.bindString(7, nosContent);
        }
 
        String nosFilepath = entity.getNosFilepath();
        if (nosFilepath != null) {
            stmt.bindString(8, nosFilepath);
        }
 
        String nosFilename = entity.getNosFilename();
        if (nosFilename != null) {
            stmt.bindString(9, nosFilename);
        }
        stmt.bindLong(10, entity.getNosCreatetime());
        stmt.bindLong(11, entity.getNosType());
 
        String nosSmstId = entity.getNosSmstId();
        if (nosSmstId != null) {
            stmt.bindString(12, nosSmstId);
        }
        stmt.bindLong(13, entity.getNosDel());
        stmt.bindLong(14, entity.getIsOpen() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotityBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nosId = entity.getNosId();
        if (nosId != null) {
            stmt.bindString(2, nosId);
        }
 
        String nosUserid = entity.getNosUserid();
        if (nosUserid != null) {
            stmt.bindString(3, nosUserid);
        }
 
        String nosOrgids = entity.getNosOrgids();
        if (nosOrgids != null) {
            stmt.bindString(4, nosOrgids);
        }
 
        String nosOrgnames = entity.getNosOrgnames();
        if (nosOrgnames != null) {
            stmt.bindString(5, nosOrgnames);
        }
 
        String nosTitle = entity.getNosTitle();
        if (nosTitle != null) {
            stmt.bindString(6, nosTitle);
        }
 
        String nosContent = entity.getNosContent();
        if (nosContent != null) {
            stmt.bindString(7, nosContent);
        }
 
        String nosFilepath = entity.getNosFilepath();
        if (nosFilepath != null) {
            stmt.bindString(8, nosFilepath);
        }
 
        String nosFilename = entity.getNosFilename();
        if (nosFilename != null) {
            stmt.bindString(9, nosFilename);
        }
        stmt.bindLong(10, entity.getNosCreatetime());
        stmt.bindLong(11, entity.getNosType());
 
        String nosSmstId = entity.getNosSmstId();
        if (nosSmstId != null) {
            stmt.bindString(12, nosSmstId);
        }
        stmt.bindLong(13, entity.getNosDel());
        stmt.bindLong(14, entity.getIsOpen() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NotityBean readEntity(Cursor cursor, int offset) {
        NotityBean entity = new NotityBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nosId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nosUserid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nosOrgids
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nosOrgnames
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nosTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nosContent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nosFilepath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nosFilename
            cursor.getLong(offset + 9), // nosCreatetime
            cursor.getInt(offset + 10), // nosType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nosSmstId
            cursor.getInt(offset + 12), // nosDel
            cursor.getShort(offset + 13) != 0 // isOpen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotityBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNosId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNosUserid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNosOrgids(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNosOrgnames(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNosTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNosContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNosFilepath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNosFilename(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNosCreatetime(cursor.getLong(offset + 9));
        entity.setNosType(cursor.getInt(offset + 10));
        entity.setNosSmstId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNosDel(cursor.getInt(offset + 12));
        entity.setIsOpen(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NotityBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NotityBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotityBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
