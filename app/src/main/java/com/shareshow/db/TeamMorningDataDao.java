package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shareshow.aide.retrofit.entity.TeamMorningData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEAM_MORNING_DATA".
*/
public class TeamMorningDataDao extends AbstractDao<TeamMorningData, Long> {

    public static final String TABLENAME = "TEAM_MORNING_DATA";

    /**
     * Properties of entity TeamMorningData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Duration = new Property(3, String.class, "duration", false, "DURATION");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Day = new Property(6, String.class, "day", false, "DAY");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USER_NAME");
        public final static Property IsRemoteAudio = new Property(8, boolean.class, "isRemoteAudio", false, "IS_REMOTE_AUDIO");
        public final static Property Url = new Property(9, String.class, "url", false, "URL");
        public final static Property IsUpload = new Property(10, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property ChmId = new Property(11, String.class, "chmId", false, "CHM_ID");
        public final static Property PhoneNum = new Property(12, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property IsNeedUpload = new Property(13, boolean.class, "isNeedUpload", false, "IS_NEED_UPLOAD");
        public final static Property Max = new Property(14, int.class, "max", false, "MAX");
        public final static Property Progress = new Property(15, int.class, "progress", false, "PROGRESS");
        public final static Property IsPlay = new Property(16, boolean.class, "isPlay", false, "IS_PLAY");
        public final static Property IsPlayItem = new Property(17, boolean.class, "isPlayItem", false, "IS_PLAY_ITEM");
    }


    public TeamMorningDataDao(DaoConfig config) {
        super(config);
    }
    
    public TeamMorningDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEAM_MORNING_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"TIME\" TEXT," + // 2: time
                "\"DURATION\" TEXT," + // 3: duration
                "\"PATH\" TEXT," + // 4: path
                "\"AUTHOR\" TEXT," + // 5: author
                "\"DAY\" TEXT," + // 6: day
                "\"USER_NAME\" TEXT," + // 7: userName
                "\"IS_REMOTE_AUDIO\" INTEGER NOT NULL ," + // 8: isRemoteAudio
                "\"URL\" TEXT," + // 9: url
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 10: isUpload
                "\"CHM_ID\" TEXT," + // 11: chmId
                "\"PHONE_NUM\" TEXT," + // 12: phoneNum
                "\"IS_NEED_UPLOAD\" INTEGER NOT NULL ," + // 13: isNeedUpload
                "\"MAX\" INTEGER NOT NULL ," + // 14: max
                "\"PROGRESS\" INTEGER NOT NULL ," + // 15: progress
                "\"IS_PLAY\" INTEGER NOT NULL ," + // 16: isPlay
                "\"IS_PLAY_ITEM\" INTEGER NOT NULL );"); // 17: isPlayItem
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEAM_MORNING_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeamMorningData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
        stmt.bindLong(9, entity.getIsRemoteAudio() ? 1L: 0L);
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
        stmt.bindLong(11, entity.getIsUpload() ? 1L: 0L);
 
        String chmId = entity.getChmId();
        if (chmId != null) {
            stmt.bindString(12, chmId);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(13, phoneNum);
        }
        stmt.bindLong(14, entity.getIsNeedUpload() ? 1L: 0L);
        stmt.bindLong(15, entity.getMax());
        stmt.bindLong(16, entity.getProgress());
        stmt.bindLong(17, entity.getIsPlay() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsPlayItem() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeamMorningData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
        stmt.bindLong(9, entity.getIsRemoteAudio() ? 1L: 0L);
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
        stmt.bindLong(11, entity.getIsUpload() ? 1L: 0L);
 
        String chmId = entity.getChmId();
        if (chmId != null) {
            stmt.bindString(12, chmId);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(13, phoneNum);
        }
        stmt.bindLong(14, entity.getIsNeedUpload() ? 1L: 0L);
        stmt.bindLong(15, entity.getMax());
        stmt.bindLong(16, entity.getProgress());
        stmt.bindLong(17, entity.getIsPlay() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsPlayItem() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeamMorningData readEntity(Cursor cursor, int offset) {
        TeamMorningData entity = new TeamMorningData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userName
            cursor.getShort(offset + 8) != 0, // isRemoteAudio
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // url
            cursor.getShort(offset + 10) != 0, // isUpload
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // chmId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phoneNum
            cursor.getShort(offset + 13) != 0, // isNeedUpload
            cursor.getInt(offset + 14), // max
            cursor.getInt(offset + 15), // progress
            cursor.getShort(offset + 16) != 0, // isPlay
            cursor.getShort(offset + 17) != 0 // isPlayItem
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeamMorningData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsRemoteAudio(cursor.getShort(offset + 8) != 0);
        entity.setUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsUpload(cursor.getShort(offset + 10) != 0);
        entity.setChmId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhoneNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsNeedUpload(cursor.getShort(offset + 13) != 0);
        entity.setMax(cursor.getInt(offset + 14));
        entity.setProgress(cursor.getInt(offset + 15));
        entity.setIsPlay(cursor.getShort(offset + 16) != 0);
        entity.setIsPlayItem(cursor.getShort(offset + 17) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeamMorningData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeamMorningData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TeamMorningData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
