package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shareshow.aide.retrofit.entity.OrgAndDept;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORG_AND_DEPT".
*/
public class OrgAndDeptDao extends AbstractDao<OrgAndDept, Void> {

    public static final String TABLENAME = "ORG_AND_DEPT";

    /**
     * Properties of entity OrgAndDept.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GiGroupid = new Property(0, String.class, "giGroupid", false, "GI_GROUPID");
        public final static Property GiParentgroupid = new Property(1, String.class, "giParentgroupid", false, "GI_PARENTGROUPID");
        public final static Property GiGroupname = new Property(2, String.class, "giGroupname", false, "GI_GROUPNAME");
        public final static Property GiLevel = new Property(3, String.class, "giLevel", false, "GI_LEVEL");
        public final static Property GiType = new Property(4, String.class, "giType", false, "GI_TYPE");
    }


    public OrgAndDeptDao(DaoConfig config) {
        super(config);
    }
    
    public OrgAndDeptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORG_AND_DEPT\" (" + //
                "\"GI_GROUPID\" TEXT UNIQUE ," + // 0: giGroupid
                "\"GI_PARENTGROUPID\" TEXT," + // 1: giParentgroupid
                "\"GI_GROUPNAME\" TEXT," + // 2: giGroupname
                "\"GI_LEVEL\" TEXT," + // 3: giLevel
                "\"GI_TYPE\" TEXT);"); // 4: giType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORG_AND_DEPT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrgAndDept entity) {
        stmt.clearBindings();
 
        String giGroupid = entity.getGiGroupid();
        if (giGroupid != null) {
            stmt.bindString(1, giGroupid);
        }
 
        String giParentgroupid = entity.getGiParentgroupid();
        if (giParentgroupid != null) {
            stmt.bindString(2, giParentgroupid);
        }
 
        String giGroupname = entity.getGiGroupname();
        if (giGroupname != null) {
            stmt.bindString(3, giGroupname);
        }
 
        String giLevel = entity.getGiLevel();
        if (giLevel != null) {
            stmt.bindString(4, giLevel);
        }
 
        String giType = entity.getGiType();
        if (giType != null) {
            stmt.bindString(5, giType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrgAndDept entity) {
        stmt.clearBindings();
 
        String giGroupid = entity.getGiGroupid();
        if (giGroupid != null) {
            stmt.bindString(1, giGroupid);
        }
 
        String giParentgroupid = entity.getGiParentgroupid();
        if (giParentgroupid != null) {
            stmt.bindString(2, giParentgroupid);
        }
 
        String giGroupname = entity.getGiGroupname();
        if (giGroupname != null) {
            stmt.bindString(3, giGroupname);
        }
 
        String giLevel = entity.getGiLevel();
        if (giLevel != null) {
            stmt.bindString(4, giLevel);
        }
 
        String giType = entity.getGiType();
        if (giType != null) {
            stmt.bindString(5, giType);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OrgAndDept readEntity(Cursor cursor, int offset) {
        OrgAndDept entity = new OrgAndDept( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // giGroupid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // giParentgroupid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // giGroupname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // giLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // giType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrgAndDept entity, int offset) {
        entity.setGiGroupid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGiParentgroupid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGiGroupname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGiLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGiType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OrgAndDept entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OrgAndDept entity) {
        return null;
    }

    @Override
    public boolean hasKey(OrgAndDept entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
