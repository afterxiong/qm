package com.shareshow.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shareshow.aide.util.StringConverter;
import java.util.List;

import com.shareshow.aide.retrofit.entity.VisitData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISIT_DATA".
*/
public class VisitDataDao extends AbstractDao<VisitData, String> {

    public static final String TABLENAME = "VISIT_DATA";

    /**
     * Properties of entity VisitData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VrId = new Property(0, String.class, "vrId", true, "VR_ID");
        public final static Property VrUrId = new Property(1, String.class, "vrUrId", false, "VR_UR_ID");
        public final static Property VrPhone = new Property(2, String.class, "vrPhone", false, "VR_PHONE");
        public final static Property VrTimestart = new Property(3, String.class, "vrTimestart", false, "VR_TIMESTART");
        public final static Property VrTimeend = new Property(4, String.class, "vrTimeend", false, "VR_TIMEEND");
        public final static Property VrPlanid = new Property(5, String.class, "vrPlanid", false, "VR_PLANID");
        public final static Property VrFileplaytime = new Property(6, int.class, "vrFileplaytime", false, "VR_FILEPLAYTIME");
        public final static Property VrGuestname = new Property(7, String.class, "vrGuestname", false, "VR_GUESTNAME");
        public final static Property VrAddresss = new Property(8, String.class, "vrAddresss", false, "VR_ADDRESSS");
        public final static Property VrContent = new Property(9, String.class, "vrContent", false, "VR_CONTENT");
        public final static Property VrGps = new Property(10, String.class, "vrGps", false, "VR_GPS");
        public final static Property VrFlag = new Property(11, int.class, "vrFlag", false, "VR_FLAG");
        public final static Property VrDate = new Property(12, String.class, "vrDate", false, "VR_DATE");
        public final static Property VrDel = new Property(13, int.class, "vrDel", false, "VR_DEL");
        public final static Property VrPicurls = new Property(14, String.class, "vrPicurls", false, "VR_PICURLS");
        public final static Property AudioPath = new Property(15, String.class, "audioPath", false, "AUDIO_PATH");
    }

    private final StringConverter vrPicurlsConverter = new StringConverter();

    public VisitDataDao(DaoConfig config) {
        super(config);
    }
    
    public VisitDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISIT_DATA\" (" + //
                "\"VR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: vrId
                "\"VR_UR_ID\" TEXT," + // 1: vrUrId
                "\"VR_PHONE\" TEXT," + // 2: vrPhone
                "\"VR_TIMESTART\" TEXT," + // 3: vrTimestart
                "\"VR_TIMEEND\" TEXT," + // 4: vrTimeend
                "\"VR_PLANID\" TEXT," + // 5: vrPlanid
                "\"VR_FILEPLAYTIME\" INTEGER NOT NULL ," + // 6: vrFileplaytime
                "\"VR_GUESTNAME\" TEXT," + // 7: vrGuestname
                "\"VR_ADDRESSS\" TEXT," + // 8: vrAddresss
                "\"VR_CONTENT\" TEXT," + // 9: vrContent
                "\"VR_GPS\" TEXT," + // 10: vrGps
                "\"VR_FLAG\" INTEGER NOT NULL ," + // 11: vrFlag
                "\"VR_DATE\" TEXT," + // 12: vrDate
                "\"VR_DEL\" INTEGER NOT NULL ," + // 13: vrDel
                "\"VR_PICURLS\" TEXT," + // 14: vrPicurls
                "\"AUDIO_PATH\" TEXT);"); // 15: audioPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISIT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitData entity) {
        stmt.clearBindings();
 
        String vrId = entity.getVrId();
        if (vrId != null) {
            stmt.bindString(1, vrId);
        }
 
        String vrUrId = entity.getVrUrId();
        if (vrUrId != null) {
            stmt.bindString(2, vrUrId);
        }
 
        String vrPhone = entity.getVrPhone();
        if (vrPhone != null) {
            stmt.bindString(3, vrPhone);
        }
 
        String vrTimestart = entity.getVrTimestart();
        if (vrTimestart != null) {
            stmt.bindString(4, vrTimestart);
        }
 
        String vrTimeend = entity.getVrTimeend();
        if (vrTimeend != null) {
            stmt.bindString(5, vrTimeend);
        }
 
        String vrPlanid = entity.getVrPlanid();
        if (vrPlanid != null) {
            stmt.bindString(6, vrPlanid);
        }
        stmt.bindLong(7, entity.getVrFileplaytime());
 
        String vrGuestname = entity.getVrGuestname();
        if (vrGuestname != null) {
            stmt.bindString(8, vrGuestname);
        }
 
        String vrAddresss = entity.getVrAddresss();
        if (vrAddresss != null) {
            stmt.bindString(9, vrAddresss);
        }
 
        String vrContent = entity.getVrContent();
        if (vrContent != null) {
            stmt.bindString(10, vrContent);
        }
 
        String vrGps = entity.getVrGps();
        if (vrGps != null) {
            stmt.bindString(11, vrGps);
        }
        stmt.bindLong(12, entity.getVrFlag());
 
        String vrDate = entity.getVrDate();
        if (vrDate != null) {
            stmt.bindString(13, vrDate);
        }
        stmt.bindLong(14, entity.getVrDel());
 
        List vrPicurls = entity.getVrPicurls();
        if (vrPicurls != null) {
            stmt.bindString(15, vrPicurlsConverter.convertToDatabaseValue(vrPicurls));
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(16, audioPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitData entity) {
        stmt.clearBindings();
 
        String vrId = entity.getVrId();
        if (vrId != null) {
            stmt.bindString(1, vrId);
        }
 
        String vrUrId = entity.getVrUrId();
        if (vrUrId != null) {
            stmt.bindString(2, vrUrId);
        }
 
        String vrPhone = entity.getVrPhone();
        if (vrPhone != null) {
            stmt.bindString(3, vrPhone);
        }
 
        String vrTimestart = entity.getVrTimestart();
        if (vrTimestart != null) {
            stmt.bindString(4, vrTimestart);
        }
 
        String vrTimeend = entity.getVrTimeend();
        if (vrTimeend != null) {
            stmt.bindString(5, vrTimeend);
        }
 
        String vrPlanid = entity.getVrPlanid();
        if (vrPlanid != null) {
            stmt.bindString(6, vrPlanid);
        }
        stmt.bindLong(7, entity.getVrFileplaytime());
 
        String vrGuestname = entity.getVrGuestname();
        if (vrGuestname != null) {
            stmt.bindString(8, vrGuestname);
        }
 
        String vrAddresss = entity.getVrAddresss();
        if (vrAddresss != null) {
            stmt.bindString(9, vrAddresss);
        }
 
        String vrContent = entity.getVrContent();
        if (vrContent != null) {
            stmt.bindString(10, vrContent);
        }
 
        String vrGps = entity.getVrGps();
        if (vrGps != null) {
            stmt.bindString(11, vrGps);
        }
        stmt.bindLong(12, entity.getVrFlag());
 
        String vrDate = entity.getVrDate();
        if (vrDate != null) {
            stmt.bindString(13, vrDate);
        }
        stmt.bindLong(14, entity.getVrDel());
 
        List vrPicurls = entity.getVrPicurls();
        if (vrPicurls != null) {
            stmt.bindString(15, vrPicurlsConverter.convertToDatabaseValue(vrPicurls));
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(16, audioPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VisitData readEntity(Cursor cursor, int offset) {
        VisitData entity = new VisitData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vrId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vrUrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vrPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vrTimestart
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vrTimeend
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vrPlanid
            cursor.getInt(offset + 6), // vrFileplaytime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vrGuestname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vrAddresss
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // vrContent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vrGps
            cursor.getInt(offset + 11), // vrFlag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // vrDate
            cursor.getInt(offset + 13), // vrDel
            cursor.isNull(offset + 14) ? null : vrPicurlsConverter.convertToEntityProperty(cursor.getString(offset + 14)), // vrPicurls
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // audioPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitData entity, int offset) {
        entity.setVrId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVrUrId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVrPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVrTimestart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVrTimeend(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVrPlanid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVrFileplaytime(cursor.getInt(offset + 6));
        entity.setVrGuestname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVrAddresss(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVrContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVrGps(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVrFlag(cursor.getInt(offset + 11));
        entity.setVrDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVrDel(cursor.getInt(offset + 13));
        entity.setVrPicurls(cursor.isNull(offset + 14) ? null : vrPicurlsConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setAudioPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VisitData entity, long rowId) {
        return entity.getVrId();
    }
    
    @Override
    public String getKey(VisitData entity) {
        if(entity != null) {
            return entity.getVrId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VisitData entity) {
        return entity.getVrId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
